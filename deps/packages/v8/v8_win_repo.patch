diff --git a/BUILD.gn b/BUILD.gn
index b2dde3f9d7..f7573e5967 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -4281,6 +4281,8 @@ if (is_component_build) {
 
     public_deps = [
       ":v8_base",
+      ":v8_headers",
+      ":v8_initializers",
       ":v8_snapshot",
     ]
 
diff --git a/src/codegen/code-stub-assembler.h b/src/codegen/code-stub-assembler.h
index 8ec615ed39..2964c6504c 100644
--- a/src/codegen/code-stub-assembler.h
+++ b/src/codegen/code-stub-assembler.h
@@ -12,15 +12,47 @@
 #include "src/common/globals.h"
 #include "src/common/message-template.h"
 #include "src/compiler/code-assembler.h"
+#include "src/objects/api-callbacks.h"
 #include "src/objects/arguments.h"
 #include "src/objects/bigint.h"
+#include "src/objects/cell.h"
+#include "src/objects/descriptor-array.h"
+#include "src/objects/embedder-data-array.h"
+#include "src/objects/feedback-cell.h"
+#include "src/objects/feedback-vector.h"
+#include "src/objects/free-space.h"
+#include "src/objects/js-break-iterator.h"
+#include "src/objects/js-collator.h"
+#include "src/objects/js-date-time-format.h"
+#include "src/objects/js-display-names.h"
+#include "src/objects/js-generator.h"
+#include "src/objects/js-list-format.h"
+#include "src/objects/js-locale.h"
+#include "src/objects/js-number-format.h"
+#include "src/objects/js-promise.h"
+#include "src/objects/js-plural-rules.h"
+#include "src/objects/js-regexp-string-iterator.h"
+#include "src/objects/js-relative-time-format.h"
+#include "src/objects/js-segment-iterator.h"
+#include "src/objects/js-segmenter.h"
+#include "src/objects/js-weak-refs.h"
+#include "src/objects/literal-objects.h"
 #include "src/objects/objects.h"
 #include "src/objects/promise.h"
+#include "src/objects/property-cell.h"
+#include "src/objects/prototype-info.h"
+#include "src/objects/regexp-match-info.h"
+#include "src/objects/scope-info.h"
 #include "src/objects/shared-function-info.h"
 #include "src/objects/smi.h"
+#include "src/objects/source-text-module.h"
+#include "src/objects/stack-frame-info.h"
+#include "src/objects/synthetic-module.h"
+#include "src/objects/templates.h"
+#include "src/objects/template-objects.h"
 #include "src/objects/tagged-index.h"
 #include "src/roots/roots.h"
-
+#include "src/wasm/wasm-objects.h"
 #include "torque-generated/exported-macros-assembler-tq.h"
 
 namespace v8 {
diff --git a/src/compiler/node-cache.h b/src/compiler/node-cache.h
index 935e5778e3..d5dae22512 100644
--- a/src/compiler/node-cache.h
+++ b/src/compiler/node-cache.h
@@ -29,7 +29,7 @@ class Node;
 // nodes such as constants, parameters, etc.
 template <typename Key, typename Hash = base::hash<Key>,
           typename Pred = std::equal_to<Key> >
-class EXPORT_TEMPLATE_DECLARE(V8_EXPORT_PRIVATE) NodeCache final {
+class V8_EXPORT_PRIVATE NodeCache final {
  public:
   explicit NodeCache(Zone* zone) : map_(zone) {}
   ~NodeCache() = default;
diff --git a/src/objects/feedback-vector.cc b/src/objects/feedback-vector.cc
index 929b312f22..7beff3395d 100644
--- a/src/objects/feedback-vector.cc
+++ b/src/objects/feedback-vector.cc
@@ -114,9 +114,9 @@ Handle<FeedbackMetadata> FeedbackMetadata::New(LocalIsolate* isolate,
   return metadata;
 }
 
-template Handle<FeedbackMetadata> FeedbackMetadata::New(
+template V8_EXPORT Handle<FeedbackMetadata> FeedbackMetadata::New(
     Isolate* isolate, const FeedbackVectorSpec* spec);
-template Handle<FeedbackMetadata> FeedbackMetadata::New(
+template V8_EXPORT Handle<FeedbackMetadata> FeedbackMetadata::New(
     OffThreadIsolate* isolate, const FeedbackVectorSpec* spec);
 
 bool FeedbackMetadata::SpecDiffersFrom(
diff --git a/test/cctest/BUILD.gn b/test/cctest/BUILD.gn
index 89fe36f65b..37481532f6 100644
--- a/test/cctest/BUILD.gn
+++ b/test/cctest/BUILD.gn
@@ -147,7 +147,6 @@ v8_source_set("cctest_sources") {
     "interpreter/source-position-matcher.h",
     "interpreter/test-bytecode-generator.cc",
     "interpreter/test-interpreter-intrinsics.cc",
-    "interpreter/test-interpreter.cc",
     "interpreter/test-source-positions.cc",
     "libplatform/test-tracing.cc",
     "libsampler/test-sampler.cc",
@@ -163,18 +162,7 @@ v8_source_set("cctest_sources") {
     "scope-test-helper.h",
     "setup-isolate-for-tests.cc",
     "setup-isolate-for-tests.h",
-    "test-access-checks.cc",
-    "test-accessor-assembler.cc",
-    "test-accessors.cc",
     "test-allocation.cc",
-    "test-api-accessors.cc",
-    "test-api-array-buffer.cc",
-    "test-api-interceptors.cc",
-    "test-api-stack-traces.cc",
-    "test-api-typed-array.cc",
-    "test-api-wasm.cc",
-    "test-api.cc",
-    "test-api.h",
     "test-array-list.cc",
     "test-atomicops.cc",
     "test-backing-store.cc",
@@ -201,8 +189,6 @@ v8_source_set("cctest_sources") {
     "test-elements-kind.cc",
     "test-factory.cc",
     "test-fast-dtoa.cc",
-    "test-feedback-vector.cc",
-    "test-feedback-vector.h",
     "test-field-type-tracking.cc",
     "test-fixed-dtoa.cc",
     "test-flags.cc",
@@ -262,38 +248,6 @@ v8_source_set("cctest_sources") {
     "trace-extension.h",
     "unicode-helpers.cc",
     "unicode-helpers.h",
-    "wasm/test-c-wasm-entry.cc",
-    "wasm/test-compilation-cache.cc",
-    "wasm/test-grow-memory.cc",
-    "wasm/test-jump-table-assembler.cc",
-    "wasm/test-liftoff-inspection.cc",
-    "wasm/test-run-wasm-64.cc",
-    "wasm/test-run-wasm-asmjs.cc",
-    "wasm/test-run-wasm-atomics.cc",
-    "wasm/test-run-wasm-atomics64.cc",
-    "wasm/test-run-wasm-bulk-memory.cc",
-    "wasm/test-run-wasm-exceptions.cc",
-    "wasm/test-run-wasm-interpreter.cc",
-    "wasm/test-run-wasm-js.cc",
-    "wasm/test-run-wasm-module.cc",
-    "wasm/test-run-wasm-sign-extension.cc",
-    "wasm/test-run-wasm-simd-liftoff.cc",
-    "wasm/test-run-wasm-simd.cc",
-    "wasm/test-run-wasm.cc",
-    "wasm/test-streaming-compilation.cc",
-    "wasm/test-wasm-breakpoints.cc",
-    "wasm/test-wasm-codegen.cc",
-    "wasm/test-wasm-debug-evaluate.cc",
-    "wasm/test-wasm-debug-evaluate.h",
-    "wasm/test-wasm-import-wrapper-cache.cc",
-    "wasm/test-wasm-interpreter-entry.cc",
-    "wasm/test-wasm-serialization.cc",
-    "wasm/test-wasm-shared-engine.cc",
-    "wasm/test-wasm-stack.cc",
-    "wasm/test-wasm-trap-position.cc",
-    "wasm/wasm-atomics-utils.h",
-    "wasm/wasm-run-utils.cc",
-    "wasm/wasm-run-utils.h",
   ]
 
   if (v8_current_cpu == "arm") {
@@ -421,6 +375,9 @@ v8_source_set("cctest_sources") {
     # C4309: 'static_cast': truncation of constant value
     cflags += [ "/wd4309" ]
 
+    # Buffer overrun warning... intended?
+    cflags += [ "/wd4789" ]
+
     # MSVS wants this for gay-{precision,shortest}.cc.
     cflags += [ "/bigobj" ]
 
diff --git a/test/unittests/BUILD.gn b/test/unittests/BUILD.gn
index f3b060e5da..1cf9ea7e52 100644
--- a/test/unittests/BUILD.gn
+++ b/test/unittests/BUILD.gn
@@ -169,7 +169,6 @@ v8_source_set("unittests_sources") {
     "compiler/graph-unittest.cc",
     "compiler/graph-unittest.h",
     "compiler/int64-lowering-unittest.cc",
-    "compiler/js-call-reducer-unittest.cc",
     "compiler/js-create-lowering-unittest.cc",
     "compiler/js-intrinsic-lowering-unittest.cc",
     "compiler/js-native-context-specialization-unittest.cc",
@@ -180,7 +179,6 @@ v8_source_set("unittests_sources") {
     "compiler/loop-peeling-unittest.cc",
     "compiler/machine-operator-reducer-unittest.cc",
     "compiler/machine-operator-unittest.cc",
-    "compiler/node-cache-unittest.cc",
     "compiler/node-matchers-unittest.cc",
     "compiler/node-properties-unittest.cc",
     "compiler/node-test-utils.cc",
@@ -188,7 +186,6 @@ v8_source_set("unittests_sources") {
     "compiler/node-unittest.cc",
     "compiler/opcodes-unittest.cc",
     "compiler/persistent-unittest.cc",
-    "compiler/redundancy-elimination-unittest.cc",
     "compiler/regalloc/live-range-unittest.cc",
     "compiler/regalloc/move-optimizer-unittest.cc",
     "compiler/regalloc/register-allocator-unittest.cc",
diff --git a/tools/v8windbg/BUILD.gn b/tools/v8windbg/BUILD.gn
index 10d06a127f..a269b81136 100644
--- a/tools/v8windbg/BUILD.gn
+++ b/tools/v8windbg/BUILD.gn
@@ -8,6 +8,12 @@ config("v8windbg_config") {
   # Required for successful compilation of SDK header file DbgModel.h.
   cflags_cc = [ "/Zc:twoPhase-" ]
 
+  if(is_win && !is_clang){
+    # Avoid "The contents of <optional> are available only with C++17 or later."
+    # warning from MSVC
+    cflags_cc += [ "/std:c++latest" ]
+  }
+
   include_dirs = [ "../.." ]
 }
 
